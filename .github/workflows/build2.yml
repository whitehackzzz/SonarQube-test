name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure a full clone for better relevancy in analysis

      # Install SonarScanner
      - name: Install SonarScanner
        run: |
          if ! command -v sonar-scanner &> /dev/null; then
            echo "SonarScanner not found, installing..."
            curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
            unzip sonar-scanner.zip
            sudo mv sonar-scanner-*/bin/* /usr/local/bin/
          else
            echo "SonarScanner is already installed"
          fi

      # Build the project (e.g., Maven for Java projects)
      - name: Build the project with Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven
          mvn clean install  # Adjust this command according to your build system

      # Run the SonarQube scan
      - name: Run SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          args: |
            # Provide compiled classes directory if it's a Java project
            -Dsonar.java.binaries=target/classes  # Replace with your compiled classes directory
            # Alternatively, exclude .java files if you don't want them analyzed
            # -Dsonar.exclusions=**/*.java
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Uncomment the lines below if you want to fail the job when the Quality Gate fails
      # - uses: SonarSource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
